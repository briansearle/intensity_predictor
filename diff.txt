
./src/main/java/edu/washington/maccoss/intensity_predictor/BuildClassifier.java
36,37d35
< <<<<<<< HEAD
< =======
39d36
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8

./src/main/java/edu/washington/maccoss/intensity_predictor/CalculateStatistics.java

./src/main/java/edu/washington/maccoss/intensity_predictor/Classify.java
24,25d23
< <<<<<<< HEAD
< =======
28d25
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
38,39d34
< <<<<<<< HEAD
< =======
41d35
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
295,297d288
< <<<<<<< HEAD
< 				network=Prego.readNetwork(neuralNetworkFile.getAbsolutePath());
< =======
299d289
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
309,311d298
< <<<<<<< HEAD
< 			network=Prego.getNetwork();
< =======
330d316
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8

./src/main/java/edu/washington/maccoss/intensity_predictor/ClassifyPeptides.java
22,23d21
< <<<<<<< HEAD
< =======
25d22
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
34,35d30
< <<<<<<< HEAD
< =======
37d31
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
45,47d38
< <<<<<<< HEAD
< 		BackPropNeuralNetwork network=Prego.getNetwork();
< =======
49d39
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
198,199d187
< <<<<<<< HEAD
< =======
221d208
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8

./src/main/java/edu/washington/maccoss/intensity_predictor/Logger.java

./src/main/java/edu/washington/maccoss/intensity_predictor/Main.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/BackPropNeuralNetwork.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/Correlation.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/General.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/LinearDiscriminantAnalysis.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/MatrixMath.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/Median.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/NaiveBayes.java

./src/main/java/edu/washington/maccoss/intensity_predictor/math/NeuralNetworkData.java

./src/main/java/edu/washington/maccoss/intensity_predictor/NeuralNetworkGenerator.java

./src/main/java/edu/washington/maccoss/intensity_predictor/parsers/AAIndex1Parser.java

./src/main/java/edu/washington/maccoss/intensity_predictor/parsers/FastaEntry.java

./src/main/java/edu/washington/maccoss/intensity_predictor/parsers/FastaReader.java

./src/main/java/edu/washington/maccoss/intensity_predictor/parsers/IntensityTsvParser.java

./src/main/java/edu/washington/maccoss/intensity_predictor/parsers/ParsedProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/parsers/PeptideFeatureSetParser.java

./src/main/java/edu/washington/maccoss/intensity_predictor/Prego.java
4,7d3
< <<<<<<< HEAD
< import java.io.InputStream;
< =======
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
26,27d21
< <<<<<<< HEAD
< =======
52d45
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8
101,124d93
< <<<<<<< HEAD
< 
< 	public static BackPropNeuralNetwork getNetwork() {
< 		if (network!=null) return network;
< 
< 		try {
< 			network=readNetwork("new_jarrett_intensities.nn");
< 		} catch (Exception e) {
< 			Logger.writeError("Error default reading neural network file!");
< 			Logger.writeError(e);
< 			System.exit(1);
< 		}
< 		return network;
< 	}
< 
< 	public static BackPropNeuralNetwork readNetwork(String path) {
< 		ClassLoader classLoader=ClassifyPeptides.class.getClassLoader();
< 		InputStream inClassifier=classLoader.getResourceAsStream(path+"/neural_network_classifier.nn");
< 		InputStream inMetadata=classLoader.getResourceAsStream(path+"/neural_network_metadata.nn");
< 		InputStream inProperties=classLoader.getResourceAsStream(path+"/neural_network_properties.nn");
< 		return NeuralNetworkData.readNetwork(inClassifier, inMetadata, inProperties);
< 	}
< =======
< >>>>>>> 941d80d9f91742d99acbb81362a2d85baca221d8

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/AbstractProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/HasProlineProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/LengthProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/MassProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/NumberAAProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/NumberAcidicProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/NumberBasicProperty.java

./src/main/java/edu/washington/maccoss/intensity_predictor/properties/PropertyInterface.java

./src/main/java/edu/washington/maccoss/intensity_predictor/structures/AbstractPeptide.java

./src/main/java/edu/washington/maccoss/intensity_predictor/structures/Peptide.java

./src/main/java/edu/washington/maccoss/intensity_predictor/structures/PeptideData.java

./src/main/java/edu/washington/maccoss/intensity_predictor/structures/PeptideScoreComparator.java

./src/main/java/edu/washington/maccoss/intensity_predictor/structures/PeptideWithScores.java

./src/main/java/edu/washington/maccoss/intensity_predictor/structures/Protein.java

./src/main/java/edu/washington/maccoss/intensity_predictor/swing/DefaultContextMenu.java

./src/main/java/edu/washington/maccoss/intensity_predictor/swing/EmptyIcon.java

./src/main/java/edu/washington/maccoss/intensity_predictor/swing/PeptideDataTableModel.java

./src/main/java/edu/washington/maccoss/intensity_predictor/swing/PregoPanel.java
39c39
< 	static private final String copy="<html><b>Using data independent acquisition to model high-responding peptides for targeted proteomics experiments.</b><br><i>Brian C. Searle, Jarrett D. Egertson, James G. Bollinger, Andrew B. Stergachis and Michael J. MacCoss<br>Published by Molecular and Cellular Proteomics on June 22, 2015, doi: 10.1074/mcp.M115.051300</i><br><br>PREGO is a software tool that predicts high responding peptides for SRM experiments. PREGO predicts peptide responses with an artificial neural network trained using 11 minimally redundant, maximally relevant properties. Crucial to its success, PREGO is trained using fragment ion intensities of equimolar synthetic peptides extracted from data independent acquisition (DIA) experiments.";
---
> 	static private final String copy="<html><b>Using data independent acquisition to model high-responding peptides for targeted proteomics experiments.</b><br>Brian C. Searle, Jarrett D. Egertson, James G. Bollinger, Andrew B. Stergachis and Michael J. MacCoss<br>Published by Molecular and Cellular Proteomics on June 22, 2015, doi: 10.1074/mcp.M115.051300<br><br>PREGO is a software tool that predicts high responding peptides for SRM experiments. PREGO predicts peptide responses with an artificial neural network trained using 11 minimally redundant, maximally relevant properties. Crucial to its success, PREGO is trained using fragment ion intensities of equimolar synthetic peptides extracted from data independent acquisition (DIA) experiments.";

./src/main/java/edu/washington/maccoss/intensity_predictor/TestClassifiers.java

./src/test/java/edu/washington/maccoss/intensity_predictor/math/CorrelationTest.java

./src/test/java/edu/washington/maccoss/intensity_predictor/math/LinearDiscriminantAnalysisTest.java

./src/test/java/edu/washington/maccoss/intensity_predictor/math/NaiveBayesTest.java

./src/test/java/edu/washington/maccoss/intensity_predictor/math/NeuralNetworkTest.java

./src/test/java/edu/washington/maccoss/intensity_predictor/parsers/AAIndex1ParserTest.java

./src/test/java/edu/washington/maccoss/intensity_predictor/structures/AbstractPeptideTest.java

./src/test/java/edu/washington/maccoss/intensity_predictor/structures/PeptideTest.java
